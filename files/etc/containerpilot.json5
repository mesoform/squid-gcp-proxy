/*
Application Orchestration for a Concierge Managed Application
http://www.mesoform.com/blog-listing/info/the-concierge-paradigm
*/
{
  consul: 'localhost:8500',
  logging: {
    level: '{{ .LOG_LEVEL }}',
    format: '{{ .LOG_FORMAT }}'  },
  jobs: [
    {
      name: 'platform-integration-setup',
      exec: '/usr/local/bin/platform_integration.sh setup'
    },
    {
      name: 'consul-agent',
      restarts: 'unlimited',
      stopTimeout: '5s',
      exec: [
        '/usr/local/bin/consul', 'agent',
        '-config-dir=/etc/coprocesses/consul',
        '-data-dir=/var/lib/consul',
        '-rejoin',
        '-retry-join', '{{ .SVC_DISCOVERY }}',
        '-retry-max', '10',
        '-retry-interval', '10s'
      ],
      when: {
        source: 'platform-integration-setup',
        once: 'exitSuccess'
      },
      health: {
        exec: 'curl --fail -Ss http://localhost:8500',
        interval: 5,
        ttl: 10,
        timeout: 2
      }
    },
    {
      name: 'leave-consul',
      exec: 'consul leave',
      when: {
        source: 'consul-agent',
        once: 'stopping'
      }
    },
    {
      name: 'scheduling-status-healthy',
      exec: ['zabbix_sender',
        '-c', '/etc/coprocesses/zabbix/zabbix_agentd.conf',
        '--key', 'container.state',
        '--value', '1'],
      when: {
        source: 'squid-gcp-proxy',
        each: 'healthy'
      }
    },
/*  ToDo: sending state=0 when main service is unhealthy
    Leaving this line in for now but feel that this will conflict when trying
    to scale containers. I.e. a process being unhealthy but container still
    running will mean docker scale will be using incorrect deployment.state value
    {
      name: 'scheduling_status_unhealthy',
      restarts: 'unlimited',
      exec: ['zabbix_sender',
        '-c', '/etc/coprocesses/zabbix/zabbix_agentd.conf',
        '--key', 'container.state',
        '--value', '0'],
      when: {
        source: 'squid-gcp-proxy',
        once: 'unhealthy',
        interval: '10s',
        timeout: '3s'
      }
    },     */
    {
      name: 'zabbix-agent',
      exec: ['/usr/sbin/zabbix_agentd',
              '-fc',
              '/etc/coprocesses/zabbix/zabbix_agentd.conf'
      ],
      restarts: 'unlimited',
      health: {
        exec: 'zabbix_agentd -t agent.ping',
        interval: 30,
        ttl: 60,
        timeout: 5
      },
      when: {
        source: 'platform-integration-setup',
        once: 'exitSuccess'
      }
    },
    {
      name: 'post-stop',
      exec: ['zabbix_sender',
             '-c', '/etc/coprocesses/zabbix/zabbix_agentd.conf',
             '--key', 'container.state',
             '--value', '0'],
      when: {
        once: 'shutdown'
      }
    },
    {
      name: 'squid-gcp-proxy',
      exec: '{{ .COMMAND }}',
      restarts: 3,
      port: '3128',
      health: {
        exec: 'squidclient -g 1 http://www.google.co.uk/?',
        interval: 10,
        ttl: 30,
        timeout: 3,
      },
      tags: [
        'squid',
        'gcp',
        'proxy'
      ],
      consul: {
        enableTagOverride: true,
        deregisterCriticalServiceAfter: '10m'
      },
      when: {
        source: 'platform-integration-setup',
        once: 'exitSuccess'
      }
    },
    {
        name: 'syslog',
        exec: '/sbin/syslogd -n -O /dev/stdout',
        restarts: 'unlimited'
    }
  ],
  watches: [
  ]
}
